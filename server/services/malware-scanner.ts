// server/services/malware-scanner.ts
export interface ScanResult {
  clean: boolean;
  threats: string[];
  sensitiveData: string[];
}

class MalwareScanner {
  // NOTE: URLs are only observed here; URL reputation is handled by VirusTotal
  // in the route logic. We do NOT add raw URLs to threats/sensitiveData.
  private RX = {
    // PII / Secrets
    aadhaar: /\b(?!0|1)[2-9]\d{11}\b/g, // 12 digits, not starting with 0/1
    pan: /\b[A-Z]{5}[0-9]{4}[A-Z]\b/g, // PAN (IND)
    ssn: /\b\d{3}-\d{2}-\d{4}\b/g, // US SSN

    // Credit cards (Visa, MC, Amex, Discover, JCB)
    creditCard:
      /\b(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})\b/g,

    // API keys & tokens (common patterns)
    stripeLive: /\bsk_live_[a-zA-Z0-9]{24,}\b/g,
    stripeTest: /\bsk_test_[a-zA-Z0-9]{24,}\b/g,
    googleApi: /\bAIza[0-9A-Za-z\-_]{35}\b/g,
    awsAccessKey: /\bAKIA[0-9A-Z]{16}\b/g,
    gcpOauth: /\bya29\.[0-9A-Za-z\-_]+\b/g,
    githubToken: /\bghp_[0-9A-Za-z]{36}\b/g,
    slackToken: /\bxox[abp]-[0-9A-Za-z-]{10,}\b/g,

    // JWT (header.payload.signature?)
    jwt: /\beyJ[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+(?:\.[A-Za-z0-9-_.+/=]+)?\b/g,

    // Private keys
    rsaPriv:
      /-----BEGIN\s+(?:RSA\s+)?PRIVATE\s+KEY-----[\s\S]*?-----END\s+(?:RSA\s+)?PRIVATE\s+KEY-----/g,
    opensshPriv:
      /-----BEGIN\s+OPENSSH\s+PRIVATE\s+KEY-----[\s\S]*?-----END\s+OPENSSH\s+PRIVATE\s+KEY-----/g,

    // DB connection strings
    mongo: /\bmongodb:\/\/[\S]+/g,
    mysql: /\bmysql:\/\/[\S]+/g,
    postgres: /\bpostgres(?:ql)?:\/\/[\S]+/g,
    redis: /\bredis:\/\/[\S]+/g,

    // Emails (broad but practical)
    email: /\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b/gi,

    // Potentially dangerous script-y patterns (heuristics only)
    evalAtob: /eval\s*\(\s*atob\s*\(/gi,
    funcAtob: /Function\s*\(\s*atob\s*\(/gi,
    inlineOnError: /onerror\s*=\s*/gi,
    inlineOnLoad: /onload\s*=\s*/gi,

    // URL (observed only; not flagged here)
    url: /\bhttps?:\/\/[^\s<>"']+\b/gi,
  } as const;

  private collectMatches(content: string, regex: RegExp): boolean {
    // Ensure deterministic behavior when using global regex repeatedly
    regex.lastIndex = 0;
    return regex.test(content);
  }

  scan(content: string): ScanResult {
    const threats: string[] = [];
    const sensitiveData: string[] = [];

    // Sensitive data detections
    if (this.collectMatches(content, this.RX.aadhaar)) sensitiveData.push("Aadhaar-like number");
    if (this.collectMatches(content, this.RX.pan)) sensitiveData.push("PAN card number");
    if (this.collectMatches(content, this.RX.ssn)) sensitiveData.push("US SSN");
    if (this.collectMatches(content, this.RX.creditCard)) sensitiveData.push("Credit card number");
    if (this.collectMatches(content, this.RX.email)) sensitiveData.push("Email address");
    if (this.collectMatches(content, this.RX.jwt)) sensitiveData.push("JWT token");
    if (this.collectMatches(content, this.RX.stripeLive)) sensitiveData.push("Stripe live secret key");
    if (this.collectMatches(content, this.RX.stripeTest)) sensitiveData.push("Stripe test secret key");
    if (this.collectMatches(content, this.RX.googleApi)) sensitiveData.push("Google API key");
    if (this.collectMatches(content, this.RX.awsAccessKey)) sensitiveData.push("AWS access key ID");
    if (this.collectMatches(content, this.RX.gcpOauth)) sensitiveData.push("Google OAuth token");
    if (this.collectMatches(content, this.RX.githubToken)) sensitiveData.push("GitHub token");
    if (this.collectMatches(content, this.RX.slackToken)) sensitiveData.push("Slack token");
    if (this.collectMatches(content, this.RX.mongo)) sensitiveData.push("MongoDB connection string");
    if (this.collectMatches(content, this.RX.mysql)) sensitiveData.push("MySQL connection string");
    if (this.collectMatches(content, this.RX.postgres)) sensitiveData.push("Postgres connection string");
    if (this.collectMatches(content, this.RX.redis)) sensitiveData.push("Redis connection string");

    // Threat heuristics (minimal to reduce false positives)
    if (this.collectMatches(content, this.RX.evalAtob)) threats.push("High‑risk script pattern: eval(atob())");
    if (this.collectMatches(content, this.RX.funcAtob)) threats.push("High‑risk script pattern: Function(atob())");
    if (this.collectMatches(content, this.RX.inlineOnError)) threats.push("Inline onerror handler");
    if (this.collectMatches(content, this.RX.inlineOnLoad)) threats.push("Inline onload handler");

    // IMPORTANT: URLs are not added to threats/sensitiveData here.

    const clean = threats.length === 0 && sensitiveData.length === 0;
    return { clean, threats, sensitiveData };
  }
}

export const malwareScanner = new MalwareScanner();